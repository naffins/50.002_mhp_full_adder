/*
   This file was generated automatically by Alchitry Labs version 1.2.1.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module autotester_module_1 (
    input clk,
    input rst,
    input s,
    input co,
    output reg a,
    output reg b,
    output reg ci,
    output reg [7:0] ind_current,
    output reg [7:0] ind_correct
  );
  
  
  
  wire [1-1:0] M_fa_tester_s_correct;
  wire [1-1:0] M_fa_tester_co_correct;
  reg [1-1:0] M_fa_tester_a;
  reg [1-1:0] M_fa_tester_b;
  reg [1-1:0] M_fa_tester_ci;
  reg [1-1:0] M_fa_tester_s;
  reg [1-1:0] M_fa_tester_co;
  full_adder_tester_4 fa_tester (
    .a(M_fa_tester_a),
    .b(M_fa_tester_b),
    .ci(M_fa_tester_ci),
    .s(M_fa_tester_s),
    .co(M_fa_tester_co),
    .s_correct(M_fa_tester_s_correct),
    .co_correct(M_fa_tester_co_correct)
  );
  
  wire [1-1:0] M_slowclock_value;
  counter_5 slowclock (
    .clk(clk),
    .rst(rst),
    .value(M_slowclock_value)
  );
  
  
  localparam S000_state_controller = 3'd0;
  localparam S001_state_controller = 3'd1;
  localparam S010_state_controller = 3'd2;
  localparam S011_state_controller = 3'd3;
  localparam S100_state_controller = 3'd4;
  localparam S101_state_controller = 3'd5;
  localparam S110_state_controller = 3'd6;
  localparam S111_state_controller = 3'd7;
  
  reg [2:0] M_state_controller_d, M_state_controller_q = S000_state_controller;
  
  reg int_a;
  reg int_b;
  reg int_ci;
  
  reg s_correct;
  reg co_correct;
  
  reg M_s_correct_dff_d, M_s_correct_dff_q = 1'h0;
  
  reg M_co_correct_dff_d, M_co_correct_dff_q = 1'h0;
  
  always @* begin
    M_state_controller_d = M_state_controller_q;
    M_co_correct_dff_d = M_co_correct_dff_q;
    M_s_correct_dff_d = M_s_correct_dff_q;
    
    M_fa_tester_s = s;
    M_fa_tester_co = co;
    M_s_correct_dff_d = M_fa_tester_s_correct;
    M_co_correct_dff_d = M_fa_tester_co_correct;
    s_correct = M_s_correct_dff_q;
    co_correct = M_co_correct_dff_q;
    
    case (M_state_controller_q)
      S000_state_controller: begin
        int_a = 1'h0;
        int_b = 1'h0;
        int_ci = 1'h0;
        ind_current = 8'h80;
        ind_correct = (s_correct & co_correct) ? 8'h80 : 8'h00;
        M_state_controller_d = (s_correct & co_correct) ? S001_state_controller : S000_state_controller;
      end
      S001_state_controller: begin
        int_a = 1'h0;
        int_b = 1'h0;
        int_ci = 1'h1;
        ind_current = 8'h40;
        ind_correct = (s_correct & co_correct) ? 8'h40 : 8'h00;
        M_state_controller_d = (s_correct & co_correct) ? S010_state_controller : S001_state_controller;
      end
      S010_state_controller: begin
        int_a = 1'h0;
        int_b = 1'h1;
        int_ci = 1'h0;
        ind_current = 8'h20;
        ind_correct = (s_correct & co_correct) ? 8'h20 : 8'h00;
        M_state_controller_d = (s_correct & co_correct) ? S011_state_controller : S010_state_controller;
      end
      S011_state_controller: begin
        int_a = 1'h0;
        int_b = 1'h1;
        int_ci = 1'h1;
        ind_current = 8'h10;
        ind_correct = (s_correct & co_correct) ? 8'h10 : 8'h00;
        M_state_controller_d = (s_correct & co_correct) ? S100_state_controller : S011_state_controller;
      end
      S100_state_controller: begin
        int_a = 1'h1;
        int_b = 1'h0;
        int_ci = 1'h0;
        ind_current = 8'h08;
        ind_correct = (s_correct & co_correct) ? 8'h08 : 8'h00;
        M_state_controller_d = (s_correct & co_correct) ? S101_state_controller : S100_state_controller;
      end
      S101_state_controller: begin
        int_a = 1'h1;
        int_b = 1'h0;
        int_ci = 1'h1;
        ind_current = 8'h04;
        ind_correct = (s_correct & co_correct) ? 8'h04 : 8'h00;
        M_state_controller_d = (s_correct & co_correct) ? S110_state_controller : S101_state_controller;
      end
      S110_state_controller: begin
        int_a = 1'h1;
        int_b = 1'h1;
        int_ci = 1'h0;
        ind_current = 8'h02;
        ind_correct = (s_correct & co_correct) ? 8'h02 : 8'h00;
        M_state_controller_d = (s_correct & co_correct) ? S111_state_controller : S110_state_controller;
      end
      S111_state_controller: begin
        int_a = 1'h1;
        int_b = 1'h1;
        int_ci = 1'h1;
        ind_current = 8'h01;
        ind_correct = (s_correct & co_correct) ? 8'h01 : 8'h00;
        M_state_controller_d = (s_correct & co_correct) ? S000_state_controller : S111_state_controller;
      end
      default: begin
        int_a = 1'h0;
        int_b = 1'h0;
        int_ci = 1'h0;
        ind_current = 8'h80;
        ind_correct = (s_correct & co_correct) ? 8'h80 : 8'h00;
        M_state_controller_d = (s_correct & co_correct) ? S001_state_controller : S000_state_controller;
      end
    endcase
    a = int_a;
    b = int_b;
    ci = int_ci;
    M_fa_tester_a = int_a;
    M_fa_tester_b = int_b;
    M_fa_tester_ci = int_ci;
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_s_correct_dff_q <= 1'h0;
    end else begin
      M_s_correct_dff_q <= M_s_correct_dff_d;
    end
  end
  
  
  always @(posedge M_slowclock_value) begin
    if (rst == 1'b1) begin
      M_state_controller_q <= 1'h0;
    end else begin
      M_state_controller_q <= M_state_controller_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_co_correct_dff_q <= 1'h0;
    end else begin
      M_co_correct_dff_q <= M_co_correct_dff_d;
    end
  end
  
endmodule
