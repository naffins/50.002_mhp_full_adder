/*
   This file was generated automatically by Alchitry Labs version 1.2.1.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module au_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input usb_rx,
    output reg usb_tx,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip,
    output reg out_a,
    output reg out_b,
    output reg out_ci,
    input in_s,
    input in_co
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_autotester_a;
  wire [1-1:0] M_autotester_b;
  wire [1-1:0] M_autotester_ci;
  wire [8-1:0] M_autotester_ind_current;
  wire [8-1:0] M_autotester_ind_correct;
  reg [1-1:0] M_autotester_s;
  reg [1-1:0] M_autotester_co;
  autotester_module_1 autotester (
    .clk(clk),
    .rst(rst),
    .s(M_autotester_s),
    .co(M_autotester_co),
    .a(M_autotester_a),
    .b(M_autotester_b),
    .ci(M_autotester_ci),
    .ind_current(M_autotester_ind_current),
    .ind_correct(M_autotester_ind_correct)
  );
  
  wire [2-1:0] M_mantester_expected_out;
  wire [1-1:0] M_mantester_s_correct;
  wire [1-1:0] M_mantester_co_correct;
  reg [1-1:0] M_mantester_a;
  reg [1-1:0] M_mantester_b;
  reg [1-1:0] M_mantester_ci;
  reg [1-1:0] M_mantester_s;
  reg [1-1:0] M_mantester_co;
  mantester_module_2 mantester (
    .a(M_mantester_a),
    .b(M_mantester_b),
    .ci(M_mantester_ci),
    .s(M_mantester_s),
    .co(M_mantester_co),
    .expected_out(M_mantester_expected_out),
    .s_correct(M_mantester_s_correct),
    .co_correct(M_mantester_co_correct)
  );
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_3 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  
  always @* begin
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    usb_tx = usb_rx;
    led = 8'h00;
    io_led = 24'h000000;
    io_seg = 8'hff;
    io_sel = 4'hf;
    io_led[16+7+0-:1] = ~io_dip[16+7+0-:1];
    
    case (io_dip[16+7+0-:1])
      1'h0: begin
        io_led[16+0+6-:7] = 7'h00;
        M_mantester_a = 1'h0;
        M_mantester_b = 1'h0;
        M_mantester_ci = 1'h0;
        out_a = M_autotester_a;
        out_b = M_autotester_b;
        out_ci = M_autotester_ci;
        M_mantester_s = 1'h0;
        M_mantester_co = 1'h0;
        M_autotester_s = in_s;
        M_autotester_co = in_co;
        io_led[8+7-:8] = M_autotester_ind_current;
        io_led[0+7-:8] = M_autotester_ind_correct;
      end
      1'h1: begin
        io_led[16+4+2-:3] = io_dip[16+4+2-:3];
        M_mantester_a = io_dip[16+6+0-:1];
        M_mantester_b = io_dip[16+5+0-:1];
        M_mantester_ci = io_dip[16+4+0-:1];
        out_a = io_dip[16+6+0-:1];
        out_b = io_dip[16+5+0-:1];
        out_ci = io_dip[16+4+0-:1];
        io_led[16+2+1-:2] = M_mantester_expected_out;
        M_mantester_s = in_s;
        M_mantester_co = in_co;
        M_autotester_s = 1'h0;
        M_autotester_co = 1'h0;
        io_led[16+1+0-:1] = M_mantester_s_correct;
        io_led[16+0+0-:1] = M_mantester_co_correct;
      end
      default: begin
        io_led[16+0+6-:7] = 7'h00;
        M_mantester_a = 1'h0;
        M_mantester_b = 1'h0;
        M_mantester_ci = 1'h0;
        out_a = M_autotester_a;
        out_b = M_autotester_b;
        out_ci = M_autotester_ci;
        M_mantester_s = 1'h0;
        M_mantester_co = 1'h0;
        M_autotester_s = in_s;
        M_autotester_co = in_co;
        io_led[8+7-:8] = M_autotester_ind_current;
        io_led[0+7-:8] = M_autotester_ind_correct;
      end
    endcase
  end
endmodule
